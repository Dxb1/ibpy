#summary Reference documentation for ib.opt.message
#labels ApiDoc

=== isWrapperMethod(name, value) (function) ===

_Predicate for wrapper methods. _

  {{{
  name: name of class attribute as string
  value: value of class attribute; any object
  returns: True if wrapper method
  }}}

defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#107 line 107]
====== . ======

=== selectWrapperMethods(cls) (function) ===

_Wrapper methods of a class. _

  {{{
  cls: class object to inspect
  returns: list of two-tuples, each (name, argnames)
  }}}

defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#119 line 119]
====== . ======

=== buildMessageTypes(wrapper, mapping, *bases) (function) ===

_Construct message types and add to given mapping. _

  {{{
  wrapper: class object to inspect for methods
  mapping: dictionary for adding new message types
  bases: sequence of base classes for message types
  returns: None
  }}}

defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#134 line 134]
====== . ======

=== messageTypeNames() (function) ===

_Builds set of message type names. _

  {{{
  returns: set of all message type names as strings
  }}}

defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#158 line 158]
====== . ======

=== MessageType(type) (class) ===

MessageType -> simple metaclass to track Message subclasses  As new Message subclasses are defined (see below), they are saved to the registry mapping.

class defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#25 line 25]

  method *`__init__(name, bases, namespace)`*

  _Constructor. _

    {{{
    name: name of newly created type
    bases: tuple of base classes for new type
    namespace: dictionary with namespace of new type
    }}}

  defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#31 line 31]
  ====== . ======

=== Message(object) (class) ===

Base class of all Message types.

class defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#45 line 45]

  method *`__init__(**kwds)`*

  _Constructor. _

    {{{
    **kwds: keywords and values for instance
    }}}

  defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#52 line 52]
  ====== . ======

  method *`__len__()`*

  defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#61 line 61]
  ====== . ======

  method *`__str__()`*

  defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#67 line 67]
  ====== . ======

  method *`items()`*

  _List of message (slot, slot value) pairs, as 2-tuples. _

    {{{
    returns: list of 2-tuples, each slot (name, value)
    }}}

  defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#75 line 75]
  ====== . ======

  method *`values()`*

  _List of instance slot values. _

    {{{
    returns: list of each slot value
    }}}

  defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#82 line 82]
  ====== . ======

  method *`keys()`*

  _List of instance slots. _

    {{{
    returns: list of each slot.
    }}}

  defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#89 line 89]
  ====== . ======

=== Error(Message) (class) ===

Specialized message type.  The error family of method calls can't be built programmatically, so we define one here.

class defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#97 line 97]


