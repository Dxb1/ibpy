#summary Defines message types for the Receiver class.
#labels ApiDoc

= Description =


This module inspects the EWrapper class to build a set of Message
types.  In creating the types, it also builds a registry of them
that the Receiver class then uses to determine message types.

=== registry (variable) ===

 _Dictionary that associates wrapper method names to the message class that should be instantiated for delivery during that method call._

defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#22 line 22]
====== . ======

=== wrapperMethods (variable) ===

 _A (partial) method so other modules can use the same mappings we have._

defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#149 line 149]
====== . ======

=== isWrapperMethod(name, value) (function) ===

_Predicate for wrapper methods. _

  {{{
  name: name of class attribute as string
  value: value of class attribute; any object
  returns: True if wrapper method
  }}}

defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#101 line 101]
====== . ======

=== selectWrapperMethods(cls) (function) ===

_Wrapper methods of a class. _

  {{{
  cls: class object to inspect
  returns: list of two-tuples, each (name, argnames)
  }}}

defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#113 line 113]
====== . ======

=== buildMessageTypes(wrapper, mapping, *bases) (function) ===

_Construct message types and add to given mapping. _

  {{{
  wrapper: class object to inspect for methods
  mapping: dictionary for adding new message types
  bases: sequence of base classes for message types
  returns: None
  }}}

defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#128 line 128]
====== . ======

=== MessageType(type) (class) ===

MessageType -> simple metaclass to track Message subclasses  As new Message subclasses are defined (see below), they are saved to the registry mapping.

class defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#25 line 25]

  method *`__init__(name, bases, namespace)`*

  _Constructor. _

    {{{
    name: name of newly created type
    bases: tuple of base classes for new type
    namespace: dictionary with namespace of new type
    }}}

  defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#31 line 31]
  ====== . ======

=== Message(object) (class) ===

Base class of all Message types.

class defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#45 line 45]

  method *`__init__(**kwds)`*

  _Constructor. _

    {{{
    **kwds: keywords and values for instance
    }}}

  defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#52 line 52]
  ====== . ======

  method *`__str__()`*

  defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#61 line 61]
  ====== . ======

  method *`items()`*

  _List of message (slot, slot value) pairs, as 2-tuples. _

    {{{
    returns: list of 2-tuples, each slot (name, value)
    }}}

  defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#69 line 69]
  ====== . ======

  method *`values()`*

  _List of instance slot values. _

    {{{
    returns: list of each slot value
    }}}

  defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#76 line 76]
  ====== . ======

  method *`keys()`*

  _List of instance slots. _

    {{{
    returns: list of each slot.
    }}}

  defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#83 line 83]
  ====== . ======

=== Error(Message) (class) ===

Specialized message type.  The error family of method calls can't be built programmatically, so we define one here.

class defined at [http://code.google.com/p/ibpy/source/browse/trunk/ib/opt/message.py#91 line 91]


