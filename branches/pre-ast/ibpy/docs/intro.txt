The IB TWS Java client source has a class/instance layout like this:

- EReader:  Thread subclass to read and dispatch messages from a socket
- EClientSeocket:  Class that has socket and a reader
- EWrapper:  Interface clients implement 

In IbPy, we take a different approach:

- Connection:  instances encapsulate a reader, writer, and socket
- Reader:  base class for threaded readers
- DefaultWriter:  instances send encode messages to TWS


The client of IbPy should create a connection object like so::

    import ib.client
    clientId = 16
    connection = ib.client.build(clientId)

To receive messages from the connection, the IbPy client registers
callable objects (instance methods, functions, etc.) with the
connection.  Here is an example of registering a function to be called
when order status messages are read::


    import ib.client
    import ib.client.message

    def automaticCancel(msg):
        if msg.contract.symbol == 'MSFT' and msg.order.action == 'BUY':
            connection.cancelOrder(msg.orderId)

    connection = ib.client.build(clientId=16)
    connection.register(ib.client.message.OpenOrder, automaticCancel)

